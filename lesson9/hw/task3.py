# Реализуйте декоратор counter, считающий и выводящий количество вызовов
# декорируемой функции.
# Для решения задачи нельзя использовать операторы global и nonlocal.
# Пример: Из файла products.json нужно создать products.csv.
# Подсказка № 1
# Создайте атрибут обертки для хранения счетчика. Добавьте переменную `count`
# непосредственно в функцию-обертку, чтобы она могла отслеживать количество
# вызовов без использования глобальных переменных.
# Подсказка № 2
# Инициализируйте счетчик по умолчанию. Перед возвратом обертки, установите
# `wrapper.count = 0`, чтобы счетчик начинал отсчет с нуля при каждом новом
# декорировании функции.
# Подсказка № 3
# Увеличивайте счетчик при каждом вызове обертки. Внутри функции-обертки
# увеличивайте значение атрибута `wrapper.count` на единицу каждый раз, когда
# вызывается декорируемая функция.
# Подсказка № 4
# Используйте `functools.wraps` для сохранения метаданных функции. К применению
# декоратора добавьте `@wraps(func)` к функции-обертке, чтобы сохранить
# оригинальные имя и документацию декорируемой функции.
# Подсказка № 5
# Выводите количество вызовов функции после ее выполнения. После вызова
# декорируемой функции в обертке добавьте вывод, который покажет, сколько раз
# функция была вызвана до текущего момента.

import functools


def counter(func):
    @functools.wraps(func)
    def wrapper(*args, **kwargs):
        wrapper.count += 1
        res = func(*args, **kwargs)
        print(f'Функцию {func.__name__} вызвали {wrapper.count} раз')
        return res

    wrapper.count = 0
    return wrapper


@counter
def greeting(name='Dimok', age=None):
    if age:
        return f'Ого, {name}! Тебе уже {age} лет, ты быстро растешь!'
    else:
        return f'Привет {name}'


if __name__ == '__main__':
    for _ in range(5):
        greeting()
